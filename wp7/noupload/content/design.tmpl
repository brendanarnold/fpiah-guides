{% extends base_template %}

{% block title %}
   Design and Layout - Windows Phone Development for People in a Hurry
{% endblock %}

{% block h1 %}
    Design and Layout for People in a Hurry
{% endblock %}

{% block body %}
  <h2>Design</h2>

   <ul>
    <li>
     Some icons for the application bar are built into Blend, but there are also a great set of Creative Commons icons at
     <a href="http://modernuiicons.com/">
      Modern UI Icons
     </a>
    </li>
    <li>
     Design should focus on typography rather than chrome. Guideline minimum size for text is 13pt
    </li>
    <li>
     Absolute minimum border around touch activated UI elements should be 7px to avoid tapping the wrong element
    </li>
    <li>
     Data is sacred, if any action will cause data to be deleted/lost then prompt the user
    </li>
    <li>
    Ultimately it is best to use a Windows Phone to get a feel for the design
    </li>
  </ul>

    <h2>Layout</h2>

   <h3>Hub and Spoke model</h3>

  <ul>
      <li>
Below is the page layout for an example app. Arrows show where navigation buttons in the pages point
{% if version == 'app' %}
  <div style="margin: 15px 0px 0px 0px"><img width="280px" src="images/hub_spoke.png" /></div>
{% else %}
  <div style="margin: 15px 0px 0px 0px"><img src="images/hub_spoke.png" /></div>
{% endif %}
      </li>
      <li>Hub and Spoke is a design principle that limits where the navigation buttons in your UI should point to ensure a good user experience</li>
      <li>
       Navigation occurs via a series of 'hubs', (e.g. Profiles, Orders) the primary hub being the home screen (e.g. Profiles)
      </li>
      <li>
       The user drills down along a 'spoke' using buttons in the UI and returning back to the hub using the physical back button on the phone
      </li>
      <li>
       Only allow navigation buttons in the UI to go deeper into the content, not back or across to another spoke (e.g. from Order Details to Add Order)
      </li>
      <li>
       To get to another spoke, user should back out to the common hub and then drill down the other path
      </li>
      <li>
       If you need to return as the result of a button press (e.g. saved a new profile), then activate the back button behaviour using,
{% if version == 'app' %}
       <pre><code>if (NavigationService.CanGoBack) 
  NavigationService.GoBack();</code></pre>
{% else %}
       <pre><code>if (NavigationService.CanGoBack) NavigationService.GoBack();</code></pre>
{% endif %}
      </li>
   </ul>

<h3>Navigating between pages</h3>

<ul>
    <li>To navigate to another page, put the following in e.g. a button click event handler
{% if version == 'app' %}
    <pre><code>NavigationService.Navigate(
    new Uri("/View/ProfilePage.xaml", UriKind.Relative)
    );</code></pre>
{% else %}
    <pre><code>NavigationService.Navigate(new Uri("/View/ProfilePage.xaml", UriKind.Relative));</code></pre>
{% endif %}
    </li>
    <li>To pass data between pages use HTML style queries in the URI e.g.
{% if version == 'app' %}
    <pre><code>NavigationService.Navigate(
    new Uri(String.Format(
    "/View/ProfilePage.xaml?Action={0}&Id={0}", 
    action, id)));</code></pre>
{% else %}
    <pre><code>NavigationService.Navigate(
    new Uri(String.Format("/View/ProfilePage.xaml?Action={0}&Id={0}", action, id)));</code></pre>
{% endif %}
    </li>
    <li>
    To retrieve these queries, use,<pre><code>string action;
NavigationContext.QueryString.TryGetValue("Action", out action);</code></pre>
    </li>
    <li>To pass an object from one page to another either,
        <ul class="compact">
            <li>Save to a ViewModel property</li>
            <li>If it is a database object with a unique id, send the id in the URI as above then retrieve the object via a <a href="csharp.html#linq">Linq query</a> on the new page</li>
        </ul>
    </li>
</ul>



{% endblock %}

